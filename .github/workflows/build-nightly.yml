name: Build Nightly

on:
  push:
    branches: [ "dev" ]
  # pull_request:
  #   branches: [ "main" ]

jobs:

  build:
    name: Build
    strategy:
      matrix:
        os: [ 'win' ]
        arch: [ 'x64', 'arm64' ]
        runner: [ 'windows-latest' ]
        include:
          - os: osx
            arch: arm64
            runner: macos-latest

    runs-on: ${{ matrix.runner }}

    env:
      rid: ${{ matrix.os }}-${{ matrix.arch }}
      OUTPUT_DIR: ./_Pack
      APPCAST_DL_BASE_URL: https://github.com/Milkeyyy/naget/releases/download/nightly
      SPARKLE_PRIVATE_KEY: ${{ secrets.SPARKLE_PRIVATE_KEY }}
      SPARKLE_PUBLIC_KEY: ${{ secrets.SPARKLE_PUBLIC_KEY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Create Directory
      shell: pwsh
      run: New-Item -ItemType Directory -ErrorAction SilentlyContinue ${{ env.OUTPUT_DIR }}/${{ env.rid }}

    - name: Load Build Info
      shell: pwsh
      run: |
        $buildInfo = (Get-Content "./build.json" | ConvertFrom-Json)
        echo "APP_VERSION=$buildInfo.version" >> $env:GITHUB_ENV
        echo "APP_RELEASE_CHANNEL=$buildInfo.release_channel" >> $env:GITHUB_ENV
        echo "APP_RELEASE_NUMBER=$buildInfo.release_number" >> $env:GITHUB_ENV

    # ビルド (Windows)
    - if: ${{ startsWith(env.rid, 'win') }}
      name: Build
      run: ./build.cmd --runtime ${{ env.rid }} --releasechannel nightly --releasenumber ${{ github.sha }}

    - if: ${{ startsWith(env.rid, 'win') }}
      name: Build Installer
      run: ./build.cmd buildinstaller --runtime ${{ env.rid }} --releasechannel nightly --releasenumber ${{ github.sha }}

    - if: ${{ startsWith(env.rid, 'win') }}
      name: Generate App Cast (Windows)
      shell: pwsh
      run: |
        dotnet tool install --global NetSparkleUpdater.Tools.AppCastGenerator
        netsparkle-generate-appcast -n naget -u ${{ env.APPCAST_DL_BASE_URL }} -o windows-${{ matrix.arch }} -a ${{ env.OUTPUT_DIR }}/${{ env.rid }} -b ${{ env.OUTPUT_DIR }}/${{ env.rid }} -e exe --output-file-name appcast_nightly_${{ env.rid }} --file-version ${{ env.APP_VERSION }} --channel nightly

    # ビルド (macOS)
    - if: ${{ startsWith(env.rid, 'osx') }}
      name: Build and Bundle
      run: ./build.sh bundleapp --runtime ${{ env.rid }} --releasechannel nightly --releasenumber ${{ github.sha }}

    - if: ${{ startsWith(env.rid, 'osx') }}
      name: Create DMG
      run: |
        npm install --global create-dmg
        create-dmg '${{ env.OUTPUT_DIR }}/${{ env.rid }}/naget.app' ${{ env.OUTPUT_DIR }}/${{ env.rid }} || true

    - if: ${{ startsWith(env.rid, 'osx') }}
      name: Rename DMG
      run: mv ${{ env.OUTPUT_DIR }}/${{ env.rid }}/naget*.dmg ${{ env.OUTPUT_DIR }}/${{ env.rid }}/naget_${{ env.rid }}.dmg

    - if: ${{ startsWith(env.rid, 'osx') }}
      name: Generate App Cast (macOS)
      shell: pwsh
      run: |
        dotnet tool install --global NetSparkleUpdater.Tools.AppCastGenerator
        netsparkle-generate-appcast -n naget -u ${{ env.APPCAST_DL_BASE_URL }} -o mac-${{ matrix.arch }} -a ${{ env.OUTPUT_DIR }}/${{ env.rid }} -b ${{ env.OUTPUT_DIR }}/${{ env.rid }} -e dmg --output-file-name appcast_nightly_${{ env.rid }} --file-version ${{ env.APP_VERSION }} --channel nightly

    # アップロード (Windows)
    - if: ${{ startsWith(env.rid, 'win') }}
      name: Upload Installer
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ env.rid }}
        path: |
          ${{ env.OUTPUT_DIR }}/${{ env.rid }}/naget_Setup_${{ env.rid }}.exe
          ${{ env.OUTPUT_DIR }}/${{ env.rid }}/appcast_nightly_${{ env.rid }}.xml*

    # アップロード (macOS)
    - if: ${{ startsWith(env.rid, 'osx') }}
      name: Upload Bundle
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ env.rid }}
        path: |
          ${{ env.OUTPUT_DIR }}/${{ env.rid }}/naget_${{ env.rid }}.dmg
          ${{ env.OUTPUT_DIR }}/${{ env.rid }}/appcast_nightly_${{ env.rid }}.xml*

  update-nightly-releases:
    name: Update Nightly Releases
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout (gh-pages)
        uses: actions/checkout@v2
        with:
          ref: gh-pages

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: ./
          merge-multiple: true

      - name: File List
        run: ls ./

      - name: Update Nightly Release
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          name: 'Nightly Build'
          prerelease: true
          body: |
            Nightly Build - Commit `${{ github.sha }}`
            - ${{ github.event.head_commit.message }}
            
            #### **macOS で `"naget.app" は壊れているため開けません。` という旨の警告が表示されて起動できない場合**
            ターミナルを起動し、以下のコマンドを実行してください。
            ```sh
            xattr -rc "/Applications/naget.app"
            ```
          files: |
            ./naget*

      - name: Push App Cast
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: Nightly Build - ${{ github.sha }}
          file_pattern: ./appcast_*.xml

      - name: Delete Build Artifact
        uses: GeekyEggo/delete-artifact@v5
        with:
          name: build-*
